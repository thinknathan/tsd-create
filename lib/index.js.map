{"version":3,"file":"index.js","sources":["../src/components/Markdown.tsx","../src/commands/Help.tsx","../src/hooks/useProjectApply.ts","../src/commands/Project/ProjectApply.tsx","../src/components/FormInput.tsx","../src/components/FormError.tsx","../src/commands/Project/ProjectConfig.tsx","../src/commands/Project/ProjectDir.tsx","../src/hooks/useDependencyInstall.ts","../src/commands/Project/ProjectInstall.tsx","../src/commands/Project/ProjectReady.tsx","../src/commands/Project/TemplateInfo.tsx","../src/hooks/useFileDownload.ts","../src/commands/Project/TemplateDownload.tsx","../src/hooks/useUnzip.ts","../src/commands/Project/TemplateUnzip.tsx","../src/components/Wizard.tsx","../src/hooks/useGitConfig.ts","../src/hooks/useProjectDir.ts","../src/hooks/useFetchTemplate.ts","../src/commands/Project/index.tsx","../src/commands/Serve.tsx","../src/App.tsx","../src/index.ts"],"sourcesContent":["import React from 'react';\nimport InkMarkdown from 'ink-markdown';\nimport chalk from 'chalk';\n\ntype Props = React.ComponentProps<typeof InkMarkdown>;\n\nexport default function Markdown({ children, ...props }: Props): JSX.Element {\n  return (\n    <InkMarkdown\n      html={chalk.cyan}\n      link={chalk.blueBright}\n      strong={chalk.green}\n      em={chalk.yellowBright}\n      codespan={chalk.dim}\n      {...props}\n    >\n      {children}\n    </InkMarkdown>\n  );\n}\n","import React from 'react';\nimport { Box } from 'ink';\nimport Gradient from 'ink-gradient';\nimport BigText from 'ink-big-text';\nimport Markdown from '../components/Markdown';\n\nconst makeGradient = () => {\n  const GRADIENT = [\n    { h: 0, s: 1, v: 1, a: 1 },\n    { h: 90, s: 1, v: 1, a: 1 },\n    { h: 180, s: 1, v: 1, a: 1 },\n    { h: 270, s: 1, v: 1, a: 1 },\n    { h: 360, s: 1, v: 1, a: 1 },\n  ];\n\n  const theta = new Date().getSeconds() * 6;\n  return GRADIENT.map((stop, index) => ({\n    ...stop,\n    h: (theta + index * 90) % 360,\n  }));\n};\n\ntype Props = {\n  text: string;\n};\n\nexport default function Help({ text }: Props): JSX.Element {\n  return (\n    <Box alignItems=\"center\" flexDirection=\"column\">\n      <Gradient colors={makeGradient()}>\n        <BigText\n          text=\"TS-DEFOLD\"\n          font=\"simple3d\"\n          letterSpacing={0}\n          space={false}\n        />\n      </Gradient>\n      <Box flexDirection=\"column\" paddingTop={1}>\n        <Markdown>{text}</Markdown>\n      </Box>\n    </Box>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport fs from 'fs';\nimport path from 'path';\n\nexport type ProjectApplyInfo = {\n  isLoading: boolean;\n  complete: boolean;\n  error: string;\n};\n\ntype ConfigValues = {\n  name: string;\n  version: string;\n  description: string;\n  author: string;\n};\n\ntype PackageJson = {\n  name: string;\n  version: string;\n  description: string;\n  author: string;\n  private: boolean;\n  license?: string;\n  repository?: string;\n};\n\nexport default function useProjectApply(\n  dir: string,\n  config: ConfigValues\n): ProjectApplyInfo {\n  const [info, setInfo] = useState<ProjectApplyInfo>({\n    isLoading: true,\n    complete: false,\n    error: '',\n  });\n\n  useEffect(() => {\n    let pending = true;\n\n    (async () => {\n      try {\n        const packageJson = JSON.parse(\n          await fs.promises.readFile(path.join(dir, 'package.json'), 'utf8')\n        ) as PackageJson;\n\n        packageJson.private = true;\n        packageJson.name = config.name;\n        packageJson.version = config.version;\n        packageJson.description = config.description;\n        packageJson.author = config.author;\n        delete packageJson.repository;\n        delete packageJson.license;\n\n        // Use replacer to provide partially ordered keys\n        const keyOrder = [\n          'private',\n          'name',\n          'version',\n          'description',\n          'author',\n        ];\n        const keys = keyOrder.reduce((acc, key) => ({ ...acc, key }), {});\n        JSON.stringify(packageJson, (key, value) => {\n          if (!(key in keys)) keyOrder.push(key);\n          return value;\n        });\n\n        await fs.promises.writeFile(\n          path.join(dir, 'package.json'),\n          JSON.stringify(packageJson, keyOrder, 2)\n        );\n\n        if (pending) {\n          setInfo((i) => ({ ...i, isLoading: false, complete: true }));\n        }\n      } catch (e) {\n        const error = e as Error;\n        if (pending) {\n          setInfo((i) => ({\n            ...i,\n            isLoading: false,\n            error: error.message,\n          }));\n        }\n      }\n    })();\n\n    return () => {\n      pending = false;\n    };\n  }, [dir, config]);\n\n  return info;\n}\n","import React, { useEffect } from 'react';\nimport { Box, Text } from 'ink';\nimport Spinner from 'ink-spinner';\nimport type { ProjectConfigValues } from './ProjectConfig';\nimport type { WizardSteps } from '../../components/Wizard';\nimport useProjectApply from '../../hooks/useProjectApply';\n\ntype Props = WizardSteps & {\n  dir: string;\n  config: ProjectConfigValues;\n};\n\nexport default function ProjectApply({\n  dir,\n  config,\n  active,\n  onCompletion,\n}: Props): JSX.Element {\n  const apply = useProjectApply(dir, config);\n\n  useEffect(() => {\n    if (active && !apply.isLoading) {\n      if (apply.error) {\n        onCompletion?.(false);\n      } else if (apply.complete) {\n        onCompletion?.(true);\n      }\n    }\n  }, [apply, active, onCompletion]);\n\n  if (apply.isLoading) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text>\n          <Text color=\"cyanBright\">\n            <Spinner type=\"hamburger\" />\n          </Text>{' '}\n          Applying project configuration\n        </Text>\n      </Box>\n    );\n  } else if (apply.error) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text>\n          <Text color=\"red\">êÑÇ</Text> Project configuration failed!\n        </Text>\n        <Text color=\"red\">\n          {'  '}\n          {apply.error}\n        </Text>\n      </Box>\n    );\n  }\n\n  return (\n    <Text>\n      <Text color=\"green\">‚úì</Text> Applied project configuration\n    </Text>\n  );\n}\n","import React, { useEffect } from 'react';\nimport TextInput from 'ink-text-input';\n\ntype Props = React.ComponentProps<typeof TextInput> & {\n  onFocus?: () => void;\n  onBlur?: () => void;\n};\n\nexport default function FormInput({\n  onFocus,\n  onBlur,\n  ...props\n}: Props): JSX.Element {\n  useEffect(() => {\n    onFocus?.();\n    return onBlur?.();\n  }, [onFocus, onBlur]);\n\n  return <TextInput {...props} showCursor />;\n}\n","import { Box, Text } from 'ink';\nimport React from 'react';\n\ntype Props = React.PropsWithChildren<unknown>;\n\nexport default function FormError({ children }: Props): JSX.Element {\n  return (\n    <Box>\n      <Text color=\"red\">{children}</Text>\n    </Box>\n  );\n}\n","import React, { useMemo, useState } from 'react';\nimport { Box, Text } from 'ink';\nimport Spinner from 'ink-spinner';\nimport { Form, Field } from 'react-final-form';\nimport semver from 'semver';\nimport FormInput from '../../components/FormInput';\nimport FormError from '../../components/FormError';\nimport type { WizardSteps } from '../../components/Wizard';\nimport type { ProjectDirInfo } from '../../hooks/useProjectDir';\n\ntype Props = WizardSteps & {\n  author: string;\n  email: string;\n  project: ProjectDirInfo;\n  onConfigured?: (values: ProjectConfigValues) => void;\n};\n\nexport type ProjectConfigValues = {\n  name: string;\n  version: string;\n  description: string;\n  author: string;\n};\n\nexport default function ProjectConfig({\n  author,\n  email,\n  project,\n  active,\n  onConfigured,\n  onCompletion,\n}: Props): JSX.Element {\n  const [activeField, setActiveField] = useState(0);\n\n  const fields = useMemo(() => {\n    return [\n      {\n        name: 'name',\n        label: 'Project Name',\n        validate: (value: string) => {\n          if (!value) {\n            return 'Required';\n          }\n        },\n        format: (value: string) =>\n          value\n            ? value\n                .toLowerCase()\n                .replace(/[^a-z \\\\-]/g, '')\n                .replace(/ /g, '-')\n            : '',\n        placeholder: project.name || 'my-awesome-game',\n      },\n      {\n        name: 'version',\n        label: 'Version',\n        placeholder: '0.1.0',\n        format: (value: string) =>\n          value === undefined ? '' : value.replace(/[^0-9.]/g, ''),\n        validate: (value: string) =>\n          !value\n            ? 'Required'\n            : semver.valid(value)\n            ? undefined\n            : 'Invalid semantic version',\n      },\n      {\n        name: 'description',\n        label: 'Description',\n        placeholder: `My Awesome ${\n          games[Math.trunc(Math.random() * games.length - 1)]\n        } Game!`,\n        format: (value: string) => (value === undefined ? '' : value),\n        validate: (value: string) => (!value ? 'Required' : undefined),\n      },\n      {\n        name: 'author',\n        label: 'Author',\n        placeholder: author + (email ? ` <${email}>` : ''),\n        format: (value: string) => (value === undefined ? '' : value),\n        validate: (value: string) => (!value ? 'Required' : undefined),\n      },\n    ];\n  }, [author, email, project]);\n\n  const onSubmit = (values: ProjectConfigValues) => {\n    onConfigured?.(values);\n    if (active) onCompletion?.(true);\n  };\n\n  return (\n    <Form\n      onSubmit={onSubmit}\n      initialValues={{\n        ...fields.reduce((acc, f) => ({ ...acc, [f.name]: '' }), {}),\n      }}\n      render={({ handleSubmit }) => (\n        <Box flexDirection=\"column\">\n          {fields.map(\n            ({ name, label, placeholder, format, validate }, index) => (\n              <Field name={name} key={name} format={format} validate={validate}>\n                {({ input, meta }) => (\n                  <Box flexDirection=\"column\">\n                    <Box>\n                      <Text bold={activeField === index}>\n                        <Text\n                          color={\n                            meta.error && !meta.pristine\n                              ? 'red'\n                              : meta.valid\n                              ? 'green'\n                              : 'cyanBright'\n                          }\n                        >\n                          {activeField === index\n                            ? '‚ùØ '\n                            : meta.touched\n                            ? '‚úì '\n                            : '  '}\n                        </Text>\n                        {`${label}: `}\n                      </Text>\n                      {activeField === index ? (\n                        <FormInput\n                          {...input}\n                          tabComplete\n                          placeholder={placeholder}\n                          onSubmit={() => {\n                            if (meta.valid && !meta.validating) {\n                              setActiveField((value) => value + 1);\n                              if (activeField === fields.length - 1) {\n                                handleSubmit();\n                              }\n                            }\n                          }}\n                        />\n                      ) : (\n                        <Text\n                          color={\n                            !meta.touched || !input.value ? 'gray' : undefined\n                          }\n                        >\n                          {input.value || placeholder}\n                        </Text>\n                      )}\n                      {meta.validating && name === 'name' && (\n                        <Box marginLeft={1}>\n                          <Text color=\"yellow\">\n                            <Spinner type=\"dots\" />\n                          </Text>\n                        </Box>\n                      )}\n                    </Box>\n                    {meta.error && meta.touched && !meta.pristine && (\n                      <Box paddingLeft={2}>\n                        <FormError>{meta.error}</FormError>\n                      </Box>\n                    )}\n                  </Box>\n                )}\n              </Field>\n            )\n          )}\n        </Box>\n      )}\n    />\n  );\n}\n\nconst games = [\n  'RPG',\n  'SHMUP',\n  'FPS',\n  'Platformer',\n  'Tower Defense',\n  'Puzzle',\n  'Racing',\n  'Action',\n  'Adventure',\n  'Strategy',\n  'Simulation',\n  'MMORPG',\n  'Battle Royal',\n];\n","import React, { useEffect } from 'react';\nimport { Box, Text } from 'ink';\nimport Spinner from 'ink-spinner';\nimport type { WizardSteps } from '../../components/Wizard';\nimport type { ProjectDirInfo } from '../../hooks/useProjectDir';\n\ntype Props = WizardSteps & {\n  project: ProjectDirInfo;\n};\n\nexport default function ProjectDir({\n  project,\n  active,\n  onCompletion,\n}: Props): JSX.Element {\n  useEffect(() => {\n    if (active && !project.isLoading) {\n      if (project.exists || !project.isEmpty) {\n        onCompletion?.(false);\n      } else {\n        onCompletion?.(true);\n      }\n    }\n  }, [project, active, onCompletion]);\n\n  //* Check if project directory is valid\n  if (project.isLoading) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text>\n          <Text color=\"cyanBright\">\n            <Spinner type=\"hamburger\" />\n          </Text>{' '}\n          Checking project directory\n        </Text>\n      </Box>\n    );\n  } else if (project.exists || !project.isEmpty) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text>\n          <Text color=\"red\">êÑÇ</Text> Project directory at{' '}\n          <Text color=\"red\">{project.relativePath || '.'}</Text> already exists!\n        </Text>\n        <Text color=\"grey\">\n          Please choose an empty or new directory for your project.\n        </Text>\n      </Box>\n    );\n  }\n\n  //* Project directory is valid\n  return (\n    <Text>\n      <Text color=\"green\">‚úì</Text> Creating new project in{' '}\n      <Text color=\"green\">{project.relativePath}</Text>\n    </Text>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { spawn } from 'cross-spawn';\n\nexport type InstallInfo = {\n  isLoading: boolean;\n  complete: boolean;\n  progress: string;\n  errors: string[];\n};\n\nexport default function useDependencyInstall(dir: string): InstallInfo {\n  const [install, setInstall] = useState<InstallInfo>({\n    isLoading: true,\n    complete: false,\n    progress: '',\n    errors: [],\n  });\n\n  useEffect(() => {\n    let output: string;\n    const child = spawn(\n      'npm',\n      ['ci', '--no-audit', '--no-progress', '--verbose'],\n      {\n        cwd: dir,\n        stdio: 'pipe',\n      }\n    );\n\n    function process(data: Buffer) {\n      output += data.toString();\n      const lines = output.split('\\n');\n      if (!output.endsWith('\\n')) output = lines.pop() ?? '';\n      const module = lines\n        .map((l) =>\n          l.replace(\n            // eslint-disable-next-line no-control-regex\n            /[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g,\n            ''\n          )\n        )\n        .map(\n          (line) =>\n            /.*reifyNode:node_modules\\/(?<module>[^\\s]+)/.exec(line)?.groups\n              ?.module\n        )\n        .filter((l) => l)\n        .pop();\n      if (module) {\n        setInstall((i) => ({\n          ...i,\n          progress: module,\n        }));\n      }\n    }\n\n    child.stderr?.on('data', process);\n\n    child.on('close', (code) => {\n      if (code === 0) {\n        setInstall((i) => ({\n          ...i,\n          isLoading: false,\n          complete: true,\n        }));\n      } else {\n        setInstall((i) => ({\n          ...i,\n          isLoading: false,\n          complete: false,\n          errors: [\n            'Failed to install dependencies',\n            'run npm install for details',\n          ],\n        }));\n      }\n    });\n\n    return () => {\n      child.kill();\n    };\n  }, [dir]);\n\n  return install;\n}\n","import React, { useEffect } from 'react';\nimport { Box, Text } from 'ink';\nimport Spinner from 'ink-spinner';\nimport type { WizardSteps } from '../../components/Wizard';\nimport useDependencyInstall from '../../hooks/useDependencyInstall';\n\ntype Props = WizardSteps & {\n  dir: string;\n};\n\nexport default function ProjectInstall({\n  dir,\n  active,\n  onCompletion,\n}: Props): JSX.Element {\n  const install = useDependencyInstall(dir);\n\n  useEffect(() => {\n    if (active) {\n      if (install.complete) {\n        onCompletion?.(true);\n      } else if (install.errors.length > 0) {\n        onCompletion?.(false);\n      }\n    }\n  }, [install, active, onCompletion]);\n\n  if (install.isLoading) {\n    return (\n      <Box flexDirection=\"row\">\n        <Text>\n          <Text color=\"cyanBright\">\n            <Spinner type=\"hamburger\" />\n          </Text>{' '}\n          Installing dependencies{' '}\n          {install.progress && <Text color=\"grey\">{install.progress}</Text>}\n        </Text>\n      </Box>\n    );\n  } else if (install.errors.length > 0) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text>\n          <Text color=\"red\">êÑÇ</Text> Dependency installation failed!\n        </Text>\n        <Text color=\"red\">\n          {'  '}\n          {install.errors.join('\\n  ')}\n        </Text>\n      </Box>\n    );\n  }\n\n  return (\n    <Text>\n      <Text color=\"green\">‚úì</Text> Installed dependencies\n    </Text>\n  );\n}\n","import { Box, Text } from 'ink';\nimport React, { useEffect } from 'react';\nimport type { WizardSteps } from '../../components/Wizard';\nimport Markdown from '../../components/Markdown';\n\ntype Props = WizardSteps & {\n  project: string;\n};\n\nexport default function ProjectReady({\n  project,\n  active,\n  onCompletion,\n}: Props): JSX.Element {\n  useEffect(() => {\n    if (active) onCompletion?.(true);\n  }, [active, onCompletion]);\n\n  return (\n    <Box paddingTop={1} flexDirection=\"column\">\n      <Text>üöÄ Your project is ready to go!</Text>\n      <Box paddingTop={1} flexDirection=\"column\">\n        <Text>Next Steps:</Text>\n        <Box paddingLeft={2} flexDirection=\"column\">\n          <Markdown>{`cd *${project}*`}</Markdown>\n          <Markdown>**npm** run dev</Markdown>\n          <Markdown>Open *app/game.project* in the Defold editor.</Markdown>\n        </Box>\n        <Box width={46} alignItems=\"center\" flexDirection=\"column\">\n          <Box paddingTop={1} flexDirection=\"row\">\n            <Text>TypeScript </Text>\n            <Text color=\"red\">‚ù§Ô∏è </Text>\n            <Text> Defold</Text>\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { Box, Text } from 'ink';\nimport Spinner from 'ink-spinner';\nimport Markdown from '../../components/Markdown';\nimport type { WizardSteps } from '../../components/Wizard';\nimport type { TemplateInfo } from '../../hooks/useFetchTemplate';\n\ntype Props = WizardSteps & {\n  template: TemplateInfo;\n};\n\nexport default function TemplateInfo({\n  template,\n  active,\n  onCompletion,\n}: Props): JSX.Element {\n  useEffect(() => {\n    if (active && !template.isLoading) {\n      onCompletion?.(template.found);\n    }\n  }, [template, active, onCompletion]);\n\n  //* Check to see if template is valid\n  if (template.isLoading) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text>\n          <Text color=\"cyanBright\">\n            <Spinner type=\"hamburger\" />\n          </Text>{' '}\n          Getting Template Info\n        </Text>\n      </Box>\n    );\n  } else if (!template.found) {\n    if (template.rate) {\n      return (\n        <Text>\n          <Text color=\"red\">êÑÇ</Text> The api is rate limited, try again in{' '}\n          <Text color=\"yellow\">{Math.ceil(template.rate / 60)}</Text>{' '}\n          {Math.ceil(template.rate / 60) > 1 ? 'minutes' : 'minute'}\n        </Text>\n      );\n    } else {\n      return (\n        <Box flexDirection=\"column\">\n          <Text>\n            <Text color=\"red\">êÑÇ</Text> The template{' '}\n            <Text color=\"red\">{template.name}</Text> was not found!\n          </Text>\n          {template.match ? (\n            <Text color=\"grey\">\n              Are you looking for <Text color=\"yellow\">{template.match}</Text>{' '}\n              instead?\n            </Text>\n          ) : (\n            <Markdown>\n              `Try:` https://github.com/search?q=tsd-template&type=repositories\n            </Markdown>\n          )}\n        </Box>\n      );\n    }\n  }\n\n  //* Template is valid\n  return (\n    <Text>\n      <Text color=\"green\">‚úì</Text> Using project template{' '}\n      <Text color=\"green\">{template.name}</Text>\n    </Text>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport fetch from 'node-fetch';\nimport fs from 'fs';\nimport tmp from 'tmp-promise';\n\nexport type FileInfo = {\n  isLoading: boolean;\n  complete: boolean;\n  error: string;\n  url: string;\n  file: string;\n  progress: number;\n  total: number;\n};\n\nexport default function useFileDownload(url: string, file = ''): FileInfo {\n  const [download, setDownload] = useState<FileInfo>({\n    isLoading: true,\n    complete: false,\n    error: '',\n    progress: 0,\n    total: 0,\n    url,\n    file,\n  });\n\n  useEffect(() => {\n    let pending = true;\n\n    (async () => {\n      const req = await fetch(url);\n      if (req.status === 200) {\n        const dest = file\n          ? file\n          : (await tmp.file({ postfix: '.zip', keep: true })).path;\n        const stream = fs.createWriteStream(dest);\n\n        //* total size\n        if (pending) {\n          setDownload((a) => ({\n            ...a,\n            file: dest,\n            total: Number(req.headers.get('content-length') || 1),\n          }));\n        }\n\n        //* progress\n        req.body.on('data', (chunk) => {\n          stream.write(chunk);\n          if (pending) {\n            setDownload((a) => ({\n              ...a,\n              progress: a.progress + chunk.length,\n            }));\n          }\n        });\n\n        //* complete\n        req.body.on('end', () => {\n          stream.end(() => {\n            if (pending) {\n              setDownload((a) => ({\n                ...a,\n                isLoading: false,\n                complete: true,\n                progress: a.total > 0 ? a.total : a.progress,\n              }));\n            }\n          });\n        });\n      } else {\n        if (pending) {\n          setDownload((a) => ({\n            ...a,\n            isLoading: false,\n            error: `${req.status} ${req.statusText}`,\n          }));\n        }\n      }\n    })();\n\n    return () => {\n      pending = false;\n    };\n  }, [url, file]);\n\n  return download;\n}\n","import React, { useEffect } from 'react';\nimport { Box, Text } from 'ink';\nimport Spinner from 'ink-spinner';\nimport type { WizardSteps } from '../../components/Wizard';\nimport Markdown from '../../components/Markdown';\nimport useFileDownload from '../../hooks/useFileDownload';\n\ntype Props = WizardSteps & {\n  url: string;\n  onDownloaded?: (file: string) => void;\n};\n\nexport default function TemplateDownload({\n  url,\n  active,\n  onDownloaded,\n  onCompletion,\n}: Props): JSX.Element {\n  const download = useFileDownload(url);\n  const label = 'Downloading template ';\n\n  useEffect(() => {\n    if (active) {\n      if (download.complete) {\n        onDownloaded?.(download.file);\n        onCompletion?.(true);\n      } else if (download.error) {\n        onCompletion?.(false);\n      }\n    }\n  }, [download, active, onCompletion, onDownloaded]);\n\n  if (download.isLoading) {\n    return (\n      <Box flexDirection=\"row\">\n        <Text>\n          <Text color=\"cyanBright\">\n            <Spinner type=\"hamburger\" />\n          </Text>{' '}\n          {label}\n          <Text color=\"grey\">{`${Number(download.progress / 1024).toFixed(\n            2\n          )} KB`}</Text>\n        </Text>\n      </Box>\n    );\n  } else if (download.error) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text>\n          <Text color=\"red\">êÑÇ</Text> Template download failed!\n        </Text>\n        <Text color=\"red\">\n          {'  '}\n          {download.error}\n        </Text>\n        <Markdown>{`\\`URL\\`: ${url}`}</Markdown>\n      </Box>\n    );\n  }\n\n  return (\n    <Text>\n      <Text color=\"green\">‚úì</Text> Downloaded template archive\n    </Text>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport rimraf from 'rimraf';\nimport Zip from 'adm-zip';\nimport path from 'path';\nimport { mkdir } from 'fs';\n\nexport type UnzipInfo = {\n  isLoading: boolean;\n  complete: boolean;\n  error: string;\n  src: string;\n  dest: string;\n  progress: string;\n};\n\nexport default function useUnzip(\n  src: string,\n  dest = '',\n  cleanup = false\n): UnzipInfo {\n  const [unzip, setUnzip] = useState<UnzipInfo>({\n    isLoading: true,\n    complete: false,\n    error: '',\n    src,\n    dest,\n    progress: '',\n  });\n\n  useEffect(() => {\n    let pending = true;\n\n    (async () => {\n      const zip = new Zip(src);\n      const entries = zip.getEntries();\n      const packageEntry = entries.find(\n        (entry) => entry.name === 'package.json'\n      );\n      if (packageEntry) {\n        const parts = packageEntry.entryName.split('/');\n        const root =\n          (parts.length > 1 ? parts.slice(0, parts.length - 1).join('/') : '') +\n          '/';\n        for (let i = 0; i < entries.length; i++) {\n          const entry = entries[i];\n          if (\n            entry.entryName.startsWith(root) &&\n            entry.entryName !== root &&\n            !entry.entryName.endsWith('/')\n          ) {\n            const relEntry = entry.entryName.replace(root, '');\n            const destPath = path.join(dest, path.dirname(relEntry), '/');\n            mkdir(destPath, { recursive: true }, () => null);\n            if (pending) {\n              setUnzip((z) => ({ ...z, progress: relEntry }));\n              await new Promise((resolve) => setTimeout(resolve, 1));\n            }\n            zip.extractEntryTo(entry.entryName, destPath, false, false);\n          }\n        }\n        if (cleanup) rimraf(src, () => null);\n        if (pending) {\n          setUnzip((z) => ({ ...z, isLoading: false, complete: true }));\n        }\n      } else {\n        if (cleanup) {\n          rimraf(src, () => null);\n          rimraf(dest, () => null);\n        }\n        if (pending) {\n          setUnzip((z) => ({\n            ...z,\n            isLoading: false,\n            error: 'No package.json',\n          }));\n        }\n      }\n    })();\n\n    return () => {\n      pending = false;\n    };\n  }, [src, dest, cleanup]);\n\n  return unzip;\n}\n","import React, { useEffect } from 'react';\nimport { Box, Text } from 'ink';\nimport Spinner from 'ink-spinner';\nimport type { WizardSteps } from '../../components/Wizard';\nimport useUnzip from '../../hooks/useUnzip';\n\ntype Props = WizardSteps & {\n  src: string;\n  dest: string;\n  remove?: boolean;\n};\n\nexport default function TemplateUnzip({\n  src,\n  dest,\n  remove,\n  active,\n  onCompletion,\n}: Props): JSX.Element {\n  const unzip = useUnzip(src, dest, remove);\n\n  useEffect(() => {\n    if (active) {\n      if (unzip.complete) {\n        onCompletion?.(true);\n      } else if (unzip.error) {\n        onCompletion?.(false);\n      }\n    }\n  }, [unzip, active, onCompletion]);\n\n  if (unzip.isLoading) {\n    return (\n      <Box flexDirection=\"row\">\n        <Text>\n          <Text color=\"cyanBright\">\n            <Spinner type=\"hamburger\" />\n          </Text>{' '}\n          Extracting template{' '}\n          {unzip.progress && <Text color=\"grey\">{unzip.progress}</Text>}\n        </Text>\n      </Box>\n    );\n  } else if (unzip.error) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text>\n          <Text color=\"red\">êÑÇ</Text> Template extraction failed!\n        </Text>\n        <Text color=\"red\">\n          {'  '}\n          {unzip.error}\n        </Text>\n      </Box>\n    );\n  }\n\n  return (\n    <Text>\n      <Text color=\"green\">‚úì</Text> Extracted template archive\n    </Text>\n  );\n}\n","import React from 'react';\n//import { Static } from 'ink';\n\ntype Props = React.PropsWithChildren<{\n  step: number;\n  exclusive?: boolean;\n}>;\n\nexport function Wizard({\n  children,\n  step,\n  exclusive,\n}: Props): JSX.Element | null {\n  const matches: React.ReactElement[] = [];\n  React.Children.forEach(children, (child) => {\n    if (React.isValidElement(child)) {\n      const tl = child.props.index ?? Number.MAX_VALUE;\n      const match = exclusive\n        ? tl == step\n          ? child\n          : null\n        : tl <= step\n        ? child\n        : null;\n      if (match) matches.push(match);\n    }\n  });\n\n  if (exclusive) {\n    return matches.length > 0\n      ? React.cloneElement(matches[0], { step, active: true })\n      : null;\n  }\n\n  return (\n    <>\n      {matches.map((match, index) =>\n        React.cloneElement(match, {\n          step,\n          key: index,\n          active: match.props.index == step,\n          complete: match.props.index < step,\n        })\n      )}\n    </>\n  );\n}\n\ntype StepProps = React.PropsWithChildren<{\n  index: number;\n  name?: string;\n  active?: boolean;\n  complete?: boolean;\n}>;\n\nexport function Step({\n  children,\n  index,\n  active,\n  complete,\n}: StepProps): JSX.Element {\n  const childrenWithProps = React.Children.map(children, (child) => {\n    if (React.isValidElement(child)) {\n      return React.cloneElement(child, { step: index, active, complete });\n    }\n    return child;\n  });\n  return <>{childrenWithProps}</>;\n}\n\nexport type WizardSteps = {\n  step?: number;\n  active?: boolean;\n  complete?: boolean;\n  onCompletion?: (success: boolean) => void;\n};\n","import { useEffect, useState } from 'react';\nimport nodegit from 'nodegit';\n\ntype Return = { user: string; email: string };\n\nexport default function useGitConfig(): Return {\n  const [config, setConfig] = useState<Return>({\n    user: '',\n    email: '',\n  });\n\n  useEffect(() => {\n    let pending = true;\n\n    (async () => {\n      try {\n        const config = await nodegit.Config.openDefault();\n        const cfg = {\n          user: (await config.getStringBuf('user.name')).toString(),\n          email: (await config.getStringBuf('user.email')).toString(),\n        };\n        if (pending) setConfig(cfg);\n      } catch (e) {\n        //! ignore\n      }\n    })();\n\n    return () => {\n      pending = false;\n    };\n  }, []);\n\n  return config;\n}\n","import fs from 'fs';\nimport path from 'path';\nimport { useEffect, useState } from 'react';\n\nexport type ProjectDirInfo = {\n  isLoading: boolean;\n  exists: boolean;\n  isEmpty: boolean;\n  relativePath: string;\n  name: string;\n};\n\nexport default function useProjectDir(dir: string): ProjectDirInfo {\n  const [results, setResults] = useState<ProjectDirInfo>({\n    isLoading: true,\n    exists: false,\n    isEmpty: false,\n    relativePath: '',\n    name: '',\n  });\n\n  useEffect(() => {\n    let pending = true;\n\n    (async () => {\n      const exists = !!(await new Promise((r) =>\n        fs.access(dir, fs.constants.F_OK, (e) => r(!e))\n      ));\n\n      const stats = {\n        isLoading: false,\n        exists,\n        isEmpty: exists\n          ? await (async () => {\n              const itr = await fs.promises.opendir(dir);\n              const { done } = await itr[Symbol.asyncIterator]().next();\n              if (!done) itr.close();\n              return !!done;\n            })()\n          : true,\n        relativePath: path.relative(process.env.INIT_CWD ?? process.cwd(), dir),\n        name: path.basename(dir),\n      };\n\n      if (pending) setResults(stats);\n    })();\n\n    return () => {\n      pending = false;\n    };\n  }, [dir]);\n\n  return results;\n}\n","import { useEffect, useState } from 'react';\nimport fetch from 'node-fetch';\n\nexport type TemplateInfo = {\n  isLoading: boolean;\n  found: boolean;\n  match: string;\n  url: string;\n  name: string;\n  rate?: number;\n};\n\ntype GitHubSearch = {\n  items: Array<{\n    name: string;\n    archive_url: string;\n    default_branch: string;\n  }>;\n};\n\nexport default function useFetchTemplate(template: string): TemplateInfo {\n  const [archive, setArchive] = useState<TemplateInfo>({\n    isLoading: true,\n    found: false,\n    match: '',\n    url: '',\n    name: '',\n  });\n\n  useEffect(() => {\n    let pending = true;\n\n    (async () => {\n      const slug =\n        (template &&\n          (template.startsWith('tsd-template-')\n            ? template\n            : `tsd-template-${template}`)) ||\n        'tsd-template';\n      const payload: Partial<TemplateInfo> = { isLoading: false };\n\n      const req = await fetch(\n        `https://api.github.com/search/repositories?q=${slug}&sort=stars`\n      );\n      if (req.status === 200) {\n        const json = (await req.json()) as GitHubSearch;\n        const results = json.items.filter((item) =>\n          item.name.startsWith('tsd-template')\n        );\n\n        const exact = results.find((item) => item.name === slug);\n        const match = (results.length && results[0]) || undefined;\n        const url = exact\n          ? exact.archive_url\n              .replace('{archive_format}', 'zipball')\n              .replace('{/ref}', `/${exact.default_branch}`)\n          : '';\n\n        payload.found = !!exact;\n        payload.match =\n          !exact && match ? match.name.replace('tsd-template-', '') : '';\n        payload.url = url;\n        payload.name = exact ? exact.name : template;\n      } else if (req.status === 403) {\n        const reset = req.headers.get('X-RateLimit-Reset');\n        if (reset) {\n          payload.found = false;\n          payload.rate = parseInt(reset) - Date.now();\n        }\n      }\n\n      if (pending) setArchive((a) => ({ ...a, ...payload }));\n    })();\n\n    return () => {\n      pending = false;\n    };\n  }, [template]);\n\n  return archive;\n}\n","import React, { useState } from 'react';\nimport { Box, useApp } from 'ink';\nimport { useParams, useHistory } from 'react-router';\nimport ProjectApply from './ProjectApply';\nimport ProjectConfig, { ProjectConfigValues } from './ProjectConfig';\nimport ProjectDir from './ProjectDir';\nimport ProjectInstall from './ProjectInstall';\nimport ProjectReady from './ProjectReady';\nimport TemplateInfo from './TemplateInfo';\nimport TemplateDownload from './TemplateDownload';\nimport TemplateUnzip from './TemplateUnzip';\nimport { Wizard, Step } from '../../components/Wizard';\nimport useGitConfig from '../../hooks/useGitConfig';\nimport useProjectDir from '../../hooks/useProjectDir';\nimport useFetchTemplate from '../../hooks/useFetchTemplate';\n\ntype Props = {\n  dir: string;\n  template: string;\n};\n\nexport default function Project({ dir, template }: Props): JSX.Element {\n  const [config, setConfig] = useState<ProjectConfigValues>();\n  const [archivePath, setArchivePath] = useState<string>();\n  const history = useHistory();\n  const { exit } = useApp();\n  const { step } = useParams<{ step?: string }>();\n  const currentStep = step ? parseInt(step) : 0;\n\n  const { user: author, email } = useGitConfig();\n  const project = useProjectDir(dir);\n  const templateInfo = useFetchTemplate(template);\n\n  const onWizardNext = (success: boolean) => {\n    if (currentStep == 7) exit();\n\n    if (success) {\n      history.push(`/project/${currentStep + 1}`);\n    } else {\n      exit(new Error());\n    }\n  };\n\n  return (\n    <Box flexDirection=\"column\">\n      <Wizard step={currentStep}>\n        <Step index={0} name=\"Project Directory\">\n          <ProjectDir project={project} onCompletion={onWizardNext} />\n        </Step>\n        <Step index={1} name=\"Template Info\">\n          <TemplateInfo template={templateInfo} onCompletion={onWizardNext} />\n        </Step>\n        <Step index={2} name=\"Project Configuration\">\n          <ProjectConfig\n            author={author}\n            email={email}\n            project={project}\n            onConfigured={(v) => setConfig(v)}\n            onCompletion={onWizardNext}\n          />\n        </Step>\n        <Step index={3} name=\"Download Template\">\n          <TemplateDownload\n            url={templateInfo.url}\n            onDownloaded={(f) => setArchivePath(f)}\n            onCompletion={onWizardNext}\n          />\n        </Step>\n        <Step index={4} name=\"Extract Template\">\n          {archivePath && (\n            <TemplateUnzip\n              src={archivePath}\n              dest={dir}\n              onCompletion={onWizardNext}\n            />\n          )}\n        </Step>\n        <Step index={5} name=\"Apply Config\">\n          {config && (\n            <ProjectApply\n              dir={dir}\n              config={config}\n              onCompletion={onWizardNext}\n            />\n          )}\n        </Step>\n        <Step index={6} name=\"Install Dependencies\">\n          <ProjectInstall dir={dir} onCompletion={onWizardNext} />\n        </Step>\n        <Step index={7} name=\"Project Ready\">\n          <ProjectReady\n            project={project.relativePath}\n            onCompletion={onWizardNext}\n          />\n        </Step>\n      </Wizard>\n    </Box>\n  );\n}\n","import { Box, Text } from 'ink';\nimport Spinner from 'ink-spinner';\nimport React from 'react';\n\nexport default function DevServer(): JSX.Element {\n  return (\n    <Box flexDirection=\"column\">\n      <Text>\n        <Text color=\"cyanBright\">\n          <Spinner type=\"hamburger\" />\n        </Text>\n        {'  Watching for changes'}\n      </Text>\n      <Box flexDirection=\"column\" marginTop={1}>\n        <Box>\n          <Text color=\"green\">./src/player.script.ts</Text>\n          <Text color=\"gray\"> [1.3 Kb] (21ms)</Text>\n        </Box>\n        <Box>\n          <Text color=\"green\">./src/orbit.script.ts</Text>\n          <Text color=\"gray\"> [1.3 Kb] (21ms)</Text>\n        </Box>\n        <Box>\n          <Text color=\"yellow\">./src/hooks.editor_script.ts</Text>\n          <Text color=\"gray\">\n            {' '}\n            <Spinner type=\"simpleDots\" />\n          </Text>\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n","import React, { useMemo } from 'react';\nimport { MemoryRouter, Switch, Route } from 'react-router';\nimport { Box, render } from 'ink';\n\nimport Help from './commands/Help';\nimport Project from './commands/Project';\nimport Serve from './commands/Serve';\n\ntype Props = {\n  path: string;\n  data?: unknown;\n};\n\nconst CLI = ({ path, data }: Props) => {\n  const { help, dir, template } = useMemo(() => {\n    const { help, dir, template } = data as {\n      help?: string;\n      dir?: string;\n      template?: string;\n    };\n    return { help: help ?? '', dir: dir ?? '', template: template ?? '' };\n  }, [data]);\n\n  return (\n    <Box width={80} flexDirection=\"column\">\n      <MemoryRouter initialEntries={[path]} initialIndex={0}>\n        <Switch>\n          <Route path=\"/help\">\n            <Help text={help} />\n          </Route>\n          <Route path=\"/project/:step?\">\n            <Project dir={dir} template={template} />\n          </Route>\n          <Route path=\"/serve\">\n            <Serve />\n          </Route>\n        </Switch>\n      </MemoryRouter>\n    </Box>\n  );\n};\n\nexport default function App(path: string, data?: unknown): Promise<void> {\n  const instance = render(<CLI path={path} data={data} />);\n  return instance.waitUntilExit();\n}\n","import path from 'path';\nimport yargs from 'yargs';\n\nimport App from './App';\n\nyargs\n  .scriptName('')\n  .usage('Usage: **npm** init @ts-defold <project-directory> -- `[options]`')\n  .positional('project-directory', {\n    describe: 'Empty directory to initialize project in',\n    type: 'string',\n  })\n  .options({\n    template: {\n      describe: 'Starting template for project',\n      type: 'string',\n    },\n    serve: {\n      describe: 'Start a dev server and file watcher',\n      type: 'boolean',\n    },\n  })\n  .command(\n    '*',\n    'Generate a new project',\n    () => null,\n    async (argv) => {\n      try {\n        if (argv._.length == 1) {\n          if (argv.serve) {\n            await App(`/serve`);\n          } else {\n            await App(`/project`, {\n              dir: path.resolve(\n                process.env.INIT_CWD ?? process.cwd(),\n                argv._[0].toString()\n              ),\n              template: argv.template,\n            });\n          }\n        } else {\n          await App('/help', { help: await yargs.getHelp() });\n        }\n      } catch (e) {\n        //* ignore\n      }\n      process.exit(0);\n    }\n  )\n  .version()\n  .epilogue(\n    'For more information on `templates` and the `dev server` see:\\n' +\n      'https://github.com/ts-defold/create#readme\\n'\n  )\n  .help().argv;\n"],"names":["InkMarkdown","chalk","Box","Gradient","BigText","useState","fs","path","Text","Spinner","TextInput","useMemo","semver","Form","Field","spawn","fetch","tmp","Zip","React","nodegit","useHistory","useApp","useParams","MemoryRouter","Switch","Route","Serve","render","yargs"],"mappings":"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"}